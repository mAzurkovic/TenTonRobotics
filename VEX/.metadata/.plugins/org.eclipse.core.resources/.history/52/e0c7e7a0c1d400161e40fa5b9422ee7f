#include "main.h"
#include "compDefaults.h"
#include <stdlib.h>

//******************
//	1010Z - Main
//******************

#define THRESHOLD 20

void liftPID(void *ignore) {
	// Target tick count for potentiometer (how high we want it)

	float Kp = 0.6;
	float Ki = 0.001;
	float Kd = 0;

	// Total accumuated error
	float errTotal;
	float errLast;

	float target = 2000;

	// Current proportion terms for each side of lift
	float prop;
	float integ;
	float deriv;

	// Threshold that manages when to activate the INTEGRAL portion
	int integAccumulate = 100;
	float integCap = 50 / Ki;

	// Motor out puts for each side of lift towers
	float output;

	analogCalibrate(1);
	encoderReset(encLift);

	while (1) {
		// Initialize the raw potentiometer input
		int currTick = analogRead(1);//encoderGet(encLift);
		printf("%d,", currTick);

		int err = target - currTick;

		// Manage the INTEGRAL term (only use if close/approaching target)
		//if (err < integAccumulate) { errTotal += err; }
		//else { errTotal = 0; }
		errTotal += err;
		// INTEGRAL cap (by standard 50 / INTEGRAL term
		//if (errTotal > integCap) { errTotal = 50 / Ki; }
		// if (errTotalRight > integCap) { errTotalRight = 50 / INTEGRAL; }
		// Compute P, I, and D terms for both right and left side of lift
		prop = err * Kp;

		integ = (errTotal * Ki);

		deriv = (errTotal - errLast) * Kd;

		errLast = err;

		// Set motor output as sum of P, I, and D terms
		output = prop + integ + deriv;

		if (output > 127) { output = 127; }

		//printf("Prop LEFT: %d   ", output);

		if (joystickGetDigital(1, 5, JOY_UP)) {
			//setLift(output);
			motorSet(3, output);
			motorSet(9, -output);
		} else if (joystickGetDigital(1, 5, JOY_DOWN)) {
			//setLift(-output);
			motorSet(3, -120);
			motorSet(9, 120);
		}else {
			//setLift(0);
			motorSet(3, 0);
			motorSet(9, -0);
		}
		// Refresh @25
		delay(25);
	}
}

// Lift/Arm control -- Bang Bang Controller
/*void lift(int encArm) {
	if (joystickGetDigital(1, 5, JOY_UP) && encArm < 630) {
		setLift(127);
	} else if (joystickGetDigital(1, 5, JOY_DOWN)) {
		setLift(-127);
	} else if (joystickGetDigital(1, 8, JOY_UP) && encArm < 325) {
		setLift(127);
	} else {
		setLift(0);
	}
} */

// Stock claw control -- NO PID
void claw() {
	if (joystickGetDigital(2, 5, JOY_UP)) {
		motorSet(3, 120);
		motorSet(9, -120);
	} else if (joystickGetDigital(2, 5, JOY_DOWN)) {
		motorSet(3, -120);
		motorSet(9, 120);
	} else if (joystickGetDigital(2, 8, JOY_UP) && analogRead(1) < 800) {
		motorSet(3, 120);
		motorSet(9, -120);
	} else {
		motorSet(3, 0);
		motorSet(9, 0);
	}
}

void operatorControl() {

	sensorReset();
	lcdClear(uart1);
	analogCalibrate(1);
	analogCalibrate(8);

	taskCreate(liftPID, TASK_DEFAULT_STACK_SIZE, NULL, TASK_PRIORITY_DEFAULT);

	while (true) {

		lcdPrint(uart1, 2, "@Right B %d", encoderGet(encBackR));
		lcdPrint(uart1, 1, "@Middle %d", encoderGet(encBackL));

		int ch1;
		int ch3;
		int ch4;

		// Call subsystems
		//lift(encoderGet(encLift));
		claw();

		// Driver DEADZONE computations
		if (abs(joystickGetAnalog(1, 4)) > THRESHOLD) {
			ch4 = joystickGetAnalog(1, 4);
		} else {
			ch4 = 0;
		}

		if (abs(joystickGetAnalog(1, 3)) > THRESHOLD) {
			ch3 = joystickGetAnalog(1, 3);
		} else {
			ch3 = 0;
		}

		if (abs(joystickGetAnalog(1, 1)) > THRESHOLD) {
			ch1 = joystickGetAnalog(1, 1);
		} else {
			ch1 = 0;
		}

		motorSet(2, -(ch3 - ch1 - ch4)); // Front Right Drive
		motorSet(1, (ch3 - ch1 + ch4)); // Back Right
		motorSet(4, (ch3 + ch1 + ch4)); // Front Left
		motorSet(10, -(ch3 + ch1 - ch4)); // Back Left
		// END Driver Deadzone

		delay(25);
	}
}
