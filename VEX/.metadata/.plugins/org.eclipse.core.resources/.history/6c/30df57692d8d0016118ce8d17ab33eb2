#include "main.h"
#include "compDefaults.h"

#define PROPORTION 0.5
#define INTEGRAL 0.0
#define DERIVATIVE 0.0

// Manual controls to lift reverse 4 bar
void lift() {
	if (joystickGetDigital(1, 6, JOY_UP)) {
		motorSet(2, 127);
		motorSet(3, -127);
		//(4, -127);
		//motorSet(5, 127);
	} else if (joystickGetDigital(1, 6, JOY_DOWN)) {
		motorSet(2, -127);
		motorSet(3, 127);
		//motorSet(4, 127);
		//motorSet(5, -127);
	} else {
		motorSet(2, 0);
		motorSet(3, 0);
		//motorSet(4, 0);
		//motorSet(5, 0);
	}
}

void liftPID(void *ignore) {
	// Target tick count for potentiometer (how high we want it)

	// Total accumuated error
	float errTotalLeft;
	float errTotalRight;

	float errLastLeft;
	float errLastRight;

	float targetLeft = 518;
	float targetRight = 489;

	// Current proportion terms for each side of lift
	float propLeft;
	float propRight;

	float integLeft;
	float integRight;

	float derivLeft;
	float derivRight;

	// Threshold that manages when to activate the INTEGRAL portion
	int integAccumulate = 100;
	float integCap = 50 / INTEGRAL;

	// Motor out puts for each side of lift towers
	float outputLeft;
	float outputRight;

	encoderReset(encRight);
	encoderReset(encLeft);

	while (1) {
		// Initialize the raw potentiometer input
		int currTickRight = encoderGet(encRight);//(3);
		int currTickLeft = encoderGet(encLeft);//analogRead(2) / 10;

		//printf("Pot LEFT: %d", currTickLeft);
		//printf("Pot RIGHT: %d", currTickRight);

		int errLeft = targetLeft - currTickLeft;
		int errRight = targetRight - currTickRight;

		// Manage the INTEGRAL term (only use if close/approaching target)
		/*if (errLeft < integAccumulate) { errTotalLeft += errLeft; }
		else { errTotalLeft = 0; }
		if (errRight < integAccumulate) { errTotalRight += errRight; }
		else { errTotalLeft = 0; } */

		// INTEGRAL cap (by standard 50 / INTEGRAL term
		//if (errTotalLeft > integCap) { errTotalLeft = 50 / INTEGRAL; }
		// if (errTotalRight > integCap) { errTotalRight = 50 / INTEGRAL; }
		// Compute P, I, and D terms for both right and left side of lift
		propLeft = errLeft * PROPORTION;
		propRight = errRight * PROPORTION;

		integLeft = errTotalLeft * INTEGRAL;
		integRight = errTotalRight * INTEGRAL;

		derivLeft = (errTotalLeft - errLastLeft) * DERIVATIVE;
		derivRight = (errTotalRight - errLastRight) * DERIVATIVE;

		errLastLeft = errLeft;
		errLastRight = errRight;

		// Set motor output as sum of P, I, and D terms
		outputLeft = propLeft; //+ integLeft + derivLeft;
		outputRight = propRight; //+ integRight + derivRight;

		if (outputLeft > 127) { outputLeft = 127; }
		if (outputRight > 127) { outputRight = 127; }

		printf("Prop LEFT: %d   ", outputLeft);
		printf("Prop RIGHT: %d   ", outputRight);

		lcdPrint(uart1, 2, "OUTPUT: %d", outputLeft);

		if (joystickGetDigital(1, 6, JOY_UP)) {
			motorSet(2, outputLeft);
			motorSet(3, -outputLeft);
		} else if (joystickGetDigital(1, 6, JOY_DOWN)) {
			motorSet(2, -50);
			motorSet(3, 50);
		}else {
			_motorClear(2);
			_motorClear(3);
		}
		// Refresh @25
		delay(25);
	}
}

void strafe() {
	int strafeJoy = joystickGetAnalog(1, 4);
	motorSet(4, strafeJoy);
	motorSet(5, strafeJoy);
}

void push() {
	if (joystickGetDigital(1, 5, JOY_UP)) {
		motorSet(8, 127);
		motorSet(9, 127);
	} else if (joystickGetDigital(1, 5, JOY_DOWN)) {
		motorSet(8, -127);
		motorSet(9, -127);
	} else {
		motorSet(8, 0);
		motorSet(9, 0);
	}
}

void operatorControl() {

	_lcdLoad();
	lcdClear(uart1);
	_motorWipe();

	// analogalibrate(3);
	// analogCalibrate(2);

    taskCreate(liftPID, TASK_DEFAULT_STACK_SIZE, NULL, TASK_PRIORITY_DEFAULT);

	while (true) {
		//lift();
		//_driveTank(10, 6, 1, 7);

		//int joyRight = joystickGetAnalog(1, 2);
		//int joyLeft = joystickGetAnalog(1, 3);

		int throttle = joystickGetAnalog(1, 3);
		int roll = joystickGetAnalog(1, 1);
		int yaw = joystickGetAnalog(1, 4);
		// Right and left drives
		//motorSet(10, joyRight);
		//motorSet(6, -joyRight);
		//motorSet(1, - joyLeft);
		//motorSet(7, joyLeft);

		motorSet(1, -throttle - roll);
		motorSet(6, -throttle - roll);
		motorSet(10, throttle - roll);
		motorSet(7, throttle - roll);

		//motorSet(10, roll);
		//motorSet(6, roll);
		//(1, roll);
		//motorSet(7, roll);

		// strafe();

		push();

		delay(25);
	}
}
